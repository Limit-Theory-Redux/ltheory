name: Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
      - '**/CONTRIBUTING.md'
      - '**/LICENSE-MIT'
      - '**/LICENSE-APACHE-2.0'
      - '**/.vscode/**'
      - '**/docs/**'
      - '**/.gitignore'
      - '**/.gitattributes'
      - '**/.editorconfig'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  gen-build-version:
    name: Generate Build Version
    runs-on: ubuntu-latest
    outputs:
      build: ${{ steps.build_name.outputs.build }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get the cargo package version
        run: |
          VERSION=$(awk -F '"' '/^version =/ { print $2 }' Cargo.toml)
          echo "NEXT_VERSION=$VERSION" >> $GITHUB_ENV
      - name: Set short git commit SHA
        shell: bash
        run: |
          CALCULATED_SHA=$(git rev-parse --short ${{ github.sha }})
          echo "SHA_SHORT=$CALCULATED_SHA" >> $GITHUB_ENV
      - name: Confirm nightly build name
        id: build_name
        run: |
          echo build=$NEXT_VERSION-$SHA_SHORT >> $GITHUB_OUTPUT

  build-windows:
    needs: gen-build-version
    name: Build Windows
    runs-on: windows-2025
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "windows"
      - name: Update build number
        run: |
          sed -i 's/Config.gameVersion = \".*\"/Config.gameVersion = \"${{ needs.gen-build-version.outputs.build }}\"/' "${env:GITHUB_WORKSPACE}/script/Config/Version.lua"
      - name: Build
        shell: bash
        run: |
          export PHX_VERSION="${{ needs.gen-build-version.outputs.build }}"
          ./build.sh --run-tests
      - name: Upload development binaries
        uses: actions/upload-artifact@v4
        with:
          name: dev-binaries-windows
          path: ${{ github.workspace }}/bin/*
      - name: Upload distributable
        uses: actions/upload-artifact@v4
        with:
          name: ltheory-windows
          path: |
            ${{ github.workspace }}/bin/*
            !${{ github.workspace }}/bin/*.pdb
            ${{ github.workspace }}/docs/*
            ${{ github.workspace }}/engine/lib/phx/script/*
            ${{ github.workspace }}/res/*
            ${{ github.workspace }}/script/*
            ${{ github.workspace }}/LICENSE
            ${{ github.workspace }}/README.md

  build-macos:
    needs: gen-build-version
    name: Build macOS
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "macos"
      - name: Build
        run: |
          export PHX_VERSION="${{ needs.gen-build-version.outputs.build }}"
          ./build.sh --run-tests --bundle
      - name: Upload development binaries
        uses: actions/upload-artifact@v4
        with:
          name: dev-binaries-macos
          path: |
            ${{ github.workspace }}/bin/*
            !${{ github.workspace }}/bin/*.app
      - name: Upload distributable
        uses: actions/upload-artifact@v4
        with:
          name: ltheory-macos
          path: ${{ github.workspace }}/bin/*.app

  build-linux:
    needs: gen-build-version
    name: Build Linux (Ubuntu 22.04)
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Update packages
        run: sudo apt-get update
      - name: Install packages
        run: sudo apt-get install -y libgl1-mesa-dev libglu1-mesa-dev libasound2-dev libudev-dev
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "linux"
      - name: Build
        run: |
          export PHX_VERSION="${{ needs.gen-build-version.outputs.build }}"
          ./build.sh --run-tests
      - name: Upload development binaries
        uses: actions/upload-artifact@v4
        with:
          name: dev-binaries-linux
          path: ${{ github.workspace }}/bin/*
      - name: Upload distributable
        uses: actions/upload-artifact@v4
        with:
          name: ltheory-linux
          path: |
            ${{ github.workspace }}/bin/*
            ${{ github.workspace }}/docs/*
            ${{ github.workspace }}/engine/lib/phx/script/*
            ${{ github.workspace }}/res/*
            ${{ github.workspace }}/script/*
            ${{ github.workspace }}/LICENSE
            ${{ github.workspace }}/README.md

  release:
    name: New release
    needs:
      - gen-build-version
      - build-windows
      - build-macos
      - build-linux
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Inspect directory after downloading artifacts
        run: ls -alFR

      - name: Zip artifacts
        run: for dir in $(ls); do cd $dir && zip ../$dir.zip ./* -r && cd ..; done

      # Get old latest (if exists)
      - name: Get latest release ID
        id: get_latest_release
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/${{ github.repository }}/releases/tags/latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Move old "latest" â†’ "previous"
      - name: Move old "latest" to "previous"
        if: ${{ steps.get_latest_release.outputs.data != '' }}
        uses: octokit/request-action@v2.x
        with:
          route: PATCH /repos/${{ github.repository }}/releases/{release_id}
          release_id: ${{ fromJson(steps.get_latest_release.outputs.data).id }}
          tag_name: previous
          name: ${{ fromJson(steps.get_latest_release.outputs.data).name }}
          body: |
            ${{ fromJson(steps.get_latest_release.outputs.data).body }}

            ---
            Archived Release
            ----------------
            This release was originally published as **latest** and has now been moved to the `previous` tag.  
            - Replaced by: Nightly ${{ needs.gen-build-version.outputs.build }}  
            - Archived on: ${{ github.event.head_commit.timestamp }}  
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Delete old latest tag
      - name: Delete 'latest' tag ref
        if: ${{ steps.get_latest_release.outputs.data != '' }}
        uses: octokit/request-action@v2.x
        with:
          route: DELETE /repos/${{ github.repository }}/git/refs/tags/latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Recreate latest tag at this commit
      - name: Re-create 'latest' tag with the current SHA
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/${{ github.repository }}/git/refs
          ref: refs/tags/latest
          sha: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Generate changelog (merged PRs with authors)
      - name: Generate changelog
        id: changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if git rev-parse previous >/dev/null 2>&1; then
            echo "CHANGES<<EOF" >> $GITHUB_ENV
            for pr in $(git log previous..HEAD --merges --pretty=format:"%s" \
              | sed -nE 's/Merge pull request #([0-9]+).*/\1/p'); do
              title=$(gh pr view $pr --json title -q .title)
              author=$(gh pr view $pr --json author -q .author.login)
              echo "- PR #$pr by @$author: $title" >> $GITHUB_ENV
            done
            echo "EOF" >> $GITHUB_ENV
          else
            echo "CHANGES=Initial nightly release." >> $GITHUB_ENV
          fi

      # Create new release with changelog
      - name: Create release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: "Nightly ${{ needs.gen-build-version.outputs.build }}"
          body: |
            Nightly Release Information
            ---------------------------
            - Version: ${{ needs.gen-build-version.outputs.build }}
            - Commit: ${{ github.sha }}
            - Build log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

            Changes since previous
            ----------------------
            ${{ env.CHANGES }}

            Notes
            -----
            This release replaces the previous nightly, which has been archived under the `previous` tag.
          tag_name: latest
          draft: false
          prerelease: true
          files: ./*.zip
