--- a/cmake/sdlchecks.cmake
+++ b/cmake/sdlchecks.cmake
@@ -27,13 +27,14 @@
       message_warn("DYNLIB REGEX'd LIB: ${_LIB} ... ${_LIB_REGEXD}")
     endif()
 
-    message(STATUS "dynamic lib${_LIB} -> ${_LIB_REGEXD}")
+    #message(STATUS "dynamic lib${_LIB} -> ${_LIB_REGEXD}")
     set(${_LNAME}_LIB_SONAME ${_LIB_REGEXD})
   endif()
 endmacro()
 
 macro(CheckDLOPEN)
   cmake_push_check_state(RESET)
+  set(CMAKE_REQUIRED_QUIET ON)
   check_symbol_exists(dlopen "dlfcn.h" HAVE_DLOPEN_IN_LIBC)
   if(NOT HAVE_DLOPEN_IN_LIBC)
     set(CMAKE_REQUIRED_LIBRARIES dl)
@@ -114,7 +115,7 @@
 # - HAVE_SDL_LOADSO opt
 macro(CheckPipewire)
     if(SDL_PIPEWIRE)
-        pkg_check_modules(PKG_PIPEWIRE libpipewire-0.3>=0.3.20)
+        pkg_check_modules(PKG_PIPEWIRE QUIET libpipewire-0.3>=0.3.20)
         if(PKG_PIPEWIRE_FOUND)
             set(HAVE_PIPEWIRE TRUE)
             file(GLOB PIPEWIRE_SOURCES ${SDL2_SOURCE_DIR}/src/audio/pipewire/*.c)
@@ -143,7 +144,7 @@
 # - HAVE_SDL_LOADSO opt
 macro(CheckPulseAudio)
   if(SDL_PULSEAUDIO)
-    pkg_check_modules(PKG_PULSEAUDIO libpulse-simple)
+    pkg_check_modules(PKG_PULSEAUDIO QUIET libpulse-simple)
     if(PKG_PULSEAUDIO_FOUND)
       set(HAVE_PULSEAUDIO TRUE)
       file(GLOB PULSEAUDIO_SOURCES ${SDL2_SOURCE_DIR}/src/audio/pulseaudio/*.c)
@@ -172,7 +173,7 @@
 # - HAVE_SDL_LOADSO opt
 macro(CheckJACK)
   if(SDL_JACK)
-    pkg_check_modules(PKG_JACK jack)
+    pkg_check_modules(PKG_JACK QUIET jack)
     if(PKG_JACK_FOUND)
       set(HAVE_JACK TRUE)
       file(GLOB JACK_SOURCES ${SDL2_SOURCE_DIR}/src/audio/jack/*.c)
@@ -201,7 +202,7 @@
 # - HAVE_SDL_LOADSO opt
 macro(CheckESD)
   if(SDL_ESD)
-    pkg_check_modules(PKG_ESD esound)
+    pkg_check_modules(PKG_ESD QUIET esound)
     if(PKG_ESD_FOUND)
       set(HAVE_ESD TRUE)
       file(GLOB ESD_SOURCES ${SDL2_SOURCE_DIR}/src/audio/esd/*.c)
@@ -294,7 +295,7 @@
 # - HAVE_SDL_LOADSO opt
 macro(CheckSNDIO)
   if(SDL_SNDIO)
-    pkg_check_modules(PKG_SNDIO sndio)
+    pkg_check_modules(PKG_SNDIO QUIET sndio)
     if(PKG_SNDIO_FOUND)
       set(HAVE_SNDIO TRUE)
       file(GLOB SNDIO_SOURCES ${SDL2_SOURCE_DIR}/src/audio/sndio/*.c)
@@ -323,7 +324,7 @@
 # - HAVE_SDL_LOADSO opt
 macro(CheckFusionSound)
   if(FUSIONSOUND)
-    pkg_check_modules(PKG_FUSIONSOUND fusionsound>=1.0.0)
+    pkg_check_modules(PKG_FUSIONSOUND QUIET fusionsound>=1.0.0)
     if(PKG_FUSIONSOUND_FOUND)
       set(HAVE_FUSIONSOUND TRUE)
       file(GLOB FUSIONSOUND_SOURCES ${SDL2_SOURCE_DIR}/src/audio/fusionsound/*.c)
@@ -401,6 +402,7 @@
 # - HAVE_SDL_LOADSO opt
 macro(CheckX11)
   cmake_push_check_state(RESET)
+  set(CMAKE_REQUIRED_QUIET ON)
   if(SDL_X11)
     foreach(_LIB X11 Xext Xcursor Xi Xfixes Xrandr Xrender Xss)
         FindLibraryAndSONAME("${_LIB}")
@@ -633,7 +635,7 @@
 macro(CheckWayland)
   if(SDL_WAYLAND)
     set(WAYLAND_FOUND FALSE)
-    pkg_check_modules(PKG_WAYLAND "wayland-client>=1.18" wayland-egl wayland-cursor egl "xkbcommon>=0.5.0")
+    pkg_check_modules(PKG_WAYLAND QUIET "wayland-client>=1.18" wayland-egl wayland-cursor egl "xkbcommon>=0.5.0")
 
     if(PKG_WAYLAND_FOUND)
       set(WAYLAND_FOUND TRUE)
@@ -701,7 +703,7 @@
       endif()
 
       if(SDL_WAYLAND_LIBDECOR)
-        pkg_check_modules(PKG_LIBDECOR libdecor-0)
+        pkg_check_modules(PKG_LIBDECOR QUIET libdecor-0)
         if(PKG_LIBDECOR_FOUND)
             set(HAVE_WAYLAND_LIBDECOR TRUE)
             set(HAVE_LIBDECOR_H 1)
@@ -749,7 +751,7 @@
 # - HAVE_SDL_LOADSO opt
 macro(CheckDirectFB)
   if(SDL_DIRECTFB)
-    pkg_check_modules(PKG_DIRECTFB directfb>=1.0.0)
+    pkg_check_modules(PKG_DIRECTFB QUIET directfb>=1.0.0)
     if(PKG_DIRECTFB_FOUND)
       set(HAVE_DIRECTFB TRUE)
       file(GLOB DIRECTFB_SOURCES ${SDL2_SOURCE_DIR}/src/video/directfb/*.c)
@@ -822,7 +824,7 @@
 # - PkgCheckModules
 macro(CheckEGL)
   if (SDL_OPENGL OR SDL_OPENGLES)
-    pkg_check_modules(EGL egl)
+    pkg_check_modules(EGL QUIET egl)
     set(CMAKE_REQUIRED_DEFINITIONS "${CMAKE_REQUIRED_DEFINITIONS} ${EGL_CFLAGS}")
     check_c_source_compiles("
         #define EGL_API_FB
@@ -1167,7 +1169,7 @@
   if(SDL_HIDAPI)
     if(SDL_HIDAPI_LIBUSB)
       set(HAVE_LIBUSB FALSE)
-      pkg_check_modules(PKG_LIBUSB libusb-1.0)
+      pkg_check_modules(PKG_LIBUSB QUIET libusb-1.0)
       if(PKG_LIBUSB_FOUND)
         check_include_file(libusb.h HAVE_LIBUSB_H ${PKG_LIBUSB_CFLAGS})
         if(HAVE_LIBUSB_H)
@@ -1221,7 +1223,7 @@
 # - n/a
 macro(CheckRPI)
   if(SDL_RPI)
-    pkg_check_modules(VIDEO_RPI bcm_host brcmegl)
+    pkg_check_modules(VIDEO_RPI QUIET bcm_host brcmegl)
     if (NOT VIDEO_RPI_FOUND)
       set(VIDEO_RPI_INCLUDE_DIRS "/opt/vc/include" "/opt/vc/include/interface/vcos/pthreads" "/opt/vc/include/interface/vmcs_host/linux/" )
       set(VIDEO_RPI_LIBRARY_DIRS "/opt/vc/lib" )
@@ -1265,7 +1267,7 @@
 # - HAVE_SDL_LOADSO opt
 macro(CheckKMSDRM)
   if(SDL_KMSDRM)
-    pkg_check_modules(PKG_KMSDRM libdrm gbm egl)
+    pkg_check_modules(PKG_KMSDRM QUIET libdrm gbm egl)
     if(PKG_KMSDRM_FOUND AND HAVE_OPENGL_EGL)
       target_link_directories(sdl-build-options INTERFACE ${PKG_KMSDRM_LIBRARY_DIRS})
       target_include_directories(sdl-build-options INTERFACE "${PKG_KMSDRM_INCLUDE_DIRS}")

--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1517,7 +1517,7 @@
 
     if(PKG_CONFIG_FOUND)
       if(SDL_DBUS)
-        pkg_search_module(DBUS dbus-1 dbus)
+        pkg_search_module(DBUS QUIET dbus-1 dbus)
         if(DBUS_FOUND)
           set(HAVE_DBUS_DBUS_H TRUE)
           target_include_directories(sdl-build-options INTERFACE "${DBUS_INCLUDE_DIRS}")
@@ -1528,7 +1528,7 @@
       endif()
 
       if(SDL_IBUS)
-        pkg_search_module(IBUS ibus-1.0 ibus)
+        pkg_search_module(IBUS QUIET ibus-1.0 ibus)
         find_path(HAVE_SYS_INOTIFY_H NAMES sys/inotify.h)
         if(IBUS_FOUND AND HAVE_SYS_INOTIFY_H)
           set(HAVE_IBUS_IBUS_H TRUE)
@@ -3161,6 +3161,7 @@
     DEPENDS ${SDL_GENERATED_HEADERS})
 
 ##### Info output #####
+if(SDL_VERBOSE)
 message(STATUS "")
 message(STATUS "SDL2 was configured with the following options:")
 message(STATUS "")
@@ -3225,6 +3226,7 @@
   message(STATUS "")
   message(STATUS "    -DSDL_ARMNEON=OFF")
 endif()
+endif()
 
 # Ensure that the extra cflags are used at compile time
 set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${EXTRA_CFLAGS} ${EXTRA_CFLAGS_BUILD}")